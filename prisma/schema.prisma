// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(STUDENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  googleUserId String? @unique

  teachingClasses Class[]             @relation("TeacherToClass")
  enrolledClasses StudentEnrollment[]
  grades          Grade[]
  notifications   Notification[]
  Account         Account[]
  Session         Session[]
}

model Class {
  id          String  @id @default(cuid())
  name        String
  description String?
  teacherId   String
  teacher     User    @relation("TeacherToClass", fields: [teacherId], references: [id])

  googleClassroomId String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  enrollments StudentEnrollment[]
  assignments Assignment[]
}

model StudentEnrollment {
  id         String   @id @default(cuid())
  classId    String
  studentId  String
  enrolledAt DateTime @default(now())

  class   Class @relation(fields: [classId], references: [id], onDelete: Cascade)
  student User  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([classId, studentId])
}

model Assignment {
  id          String    @id @default(cuid())
  title       String
  description String?
  dueDate     DateTime?
  maxPoints   Int?
  classId     String
  class       Class     @relation(fields: [classId], references: [id], onDelete: Cascade)

  googleAssignmentId String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  grades Grade[]
}

model Grade {
  id          String    @id @default(cuid())
  gradeValue  String
  comment     String?
  submittedAt DateTime?
  gradedAt    DateTime  @default(now())

  studentId    String
  assignmentId String

  student    User       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  assignment Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)

  googleSubmissionId String? @unique

  @@unique([studentId, assignmentId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  STUDENT
  TEACHER
  ADMIN
}
